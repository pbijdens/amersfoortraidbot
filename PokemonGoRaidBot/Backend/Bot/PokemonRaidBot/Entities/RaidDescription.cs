using Botje.DB;
using Botje.Messaging.Models;
using RaidBot.Backend.Bot.PokemonRaidBot.Enums;
using System;
using System.Collections.Generic;
using System.Linq;

namespace RaidBot.Backend.Bot.PokemonRaidBot.Entities
{
    public class RaidDescription : IAtom
    {
        /// <summary>
        /// Constructor.
        /// </summary>
        public RaidDescription()
        {
            Sources = new List<ExternalSource>();
            Publications = new List<PublicationEntry>();
        }

        /// <summary>
        /// required
        /// </summary>
        public Guid UniqueID { get; set; }

        // user for whom we create this raid, one allowed per user
        public User User { get; set; }

        // raid location
        public Location Location { get; set; }

        // address of the raid
        public string Address { get; set; }

        // goal of the raid
        public string Raid { get; set; }

        // name of the gym
        public string Gym { get; set; }

        // current alignmane of the gym
        public Team Alignment { get; set; }

        // UTC timestamp when the raid will unlock
        public DateTime RaidUnlockTime { get; set; }

        // UTC timestamp when the raid will end
        public DateTime RaidEndTime { get; set; }

        // number of updates to this structure
        public int UpdateCount { get; set; }

        // Remarks for this raid, could be ex-raid trigger or anything else
        public string Remarks { get; set; }

        // Message ID of the message containing the raid information. Used to automatically delete the raid message from the primary channel when it expires.
        public long? TelegramMessageID { get; set; }

        // External sources for this raid
        public List<ExternalSource> Sources { get; set; }

        // List of publication channels to which this message was pushed.
        public List<PublicationEntry> Publications { get; set; }

        public string AllValuesAsString()
        {
            string sources = String.Join(",", Sources.Select(x => x.AllValuesAsString()));
            string publications = String.Join(",", Publications.Select(x => x.AllValuesAsString()));
            return $"{UniqueID};{Location?.Latitude};{Location?.Longitude};{Address};{Raid};{Gym};{Alignment};{RaidUnlockTime};{RaidEndTime};{UpdateCount};{Remarks};{TelegramMessageID};{sources};{publications}";
        }

    }

    public class ExternalSource
    {
        /// <summary>
        /// If set to not null or empty, this entity was generated by the system identiofied by this string.
        /// </summary>
        public string SourceID { get; set; }

        /// <summary>
        /// External unique ID.
        /// </summary>
        public string ExternalID { get; set; }

        /// <summary>
        /// URL to the external system that created this raid.
        /// </summary>
        public string URL { get; set; }

        public string AllValuesAsString()
        {
            return $"{SourceID};{ExternalID};{URL}";
        }
    }

    public class PublicationEntry
    {
        public long ChannelID { get; set; }

        public long TelegramMessageID { get; set; }

        public DateTime LastModificationTimeUTC { get; set; }

        public string AllValuesAsString()
        {
            return $"{ChannelID};{TelegramMessageID}";
        }
    }
}
